r <- 5L
e <- y + r
class(e)
TRUE * 5
FALSE * 5
k <- TRUE
class(k)
2 < 3
2 == 2.0
2L == 2.0
'2' != 2
'norman' == 'junjie'
x <- c(1, 2, 3, 4, 5)
y <- c('One', 'two', 'three', 'four', 'five')
# extract elements from a vector
x[0]
# extract elements from a vector
x[1]
x <- c(6, 7, 8, 9, 10)
# extract elements from a vector
x[1]
# extract elements from a vector
x[5]
# extract elements from a vector
x[3:5]
x + 2
x
x * 10
sqrt(x)
w <- c(1:10)
t <- c(5:-7)
length(t)
nchar(t)
t + c(-6, -7)
t + c(1, 2)
w + c(2, 5)
t >= 0
all(t >= 0)
all(t >= -6)
all(t > -6)
all(t > -7)
t > -7
t
all(t >= -7)
any(t > 0)
a <- c(one=10, two=20, three=30)
a[1]
a['one']
a['two']
names(a) <- c('a', 'b', 'c')
a['one']
a['a']
a
b <- c('1', '3', '5', '7', '9')
b
c <- as.numeric(b)
c
class(c[1])
class(b[1])
d <- as.factor(c)
class(d[1])
d <- as.character(c)
class(d[1])
factor(x=c('HighSchool', 'Master', 'College', 'Doctorate'),
levels=c('HighSchool', 'College', 'Master', 'Doctorate'),
ordered=TRUE)
log(2, base=10)
log(2, base=5)
log(2)
abs(-10)
mean(c(2, 4, 6, 8, 10))
range(t)
?mean
?range
NULL == NA
length(c(1, 2, 3, 4, 5, NA))
length(c(1, 2, 3, 4, 5, NULL))
## boolean
as.numeric(TRUE)
as.numeric(FALSE)
1 == 1
1 == 1.0
if (x == 10){
print('condition satisfied!')
}
x = 5
if (x == 10){
print('condition satisfied!')
}
x = 10
if (x == 10){
print('condition satisfied!')
}
x = 10.00000000
if (x == 10){
print('condition satisfied!')
}
x = 10.00000000001
if (x == 10){
print('condition satisfied!')
}
else{
if (x == 10){
print('condition satisfied!')
}
else {
check.bool <- function(x){
if (x == 10) {
print('condition satisfied!')
}
else {
print('condition not satisfied!')
}
}
check.bool(x)
x = NULL
check.bool <- function(x){
if (x == 10) {
print('condition satisfied!')
}
else if (x == NULL) {
print('nothing detected!')
}
else {
print('condition not satisfied!')
}
}
check.bool(x)
x = NA
check.bool <- function(x){
if (x == 10) {
print('condition satisfied!')
}
else if (x == NA) {
print('nothing detected!')
}
else {
print('condition not satisfied!')
}
}
check.bool(x)
x = 0
check.bool <- function(x){
if (x == 10) {
print('condition satisfied!')
}
else if (x == 0) {
print('nothing detected!')
}
else {
print('condition not satisfied!')
}
}
check.bool(x)
use.switch <- function(norman){
switch(x,
"a" = "first",
"b" = "second",
"c" = "third",
"z" = "last",
"other")
}
View(use.switch)
library(ggplot2)
data(diamond)
head(diamonds)
library(ggplot2)
data(diamonds)
head(diamonds)
hist(diamonds$carat, main='Carat Histogram', xlab='Carat')
plot(price ~ carat, data=diamonds)
# plot(diamonds$carat, diamonds$price)
boxplot(diamonds$carat)
ggplot(data=diamonds) + geom_histogram(x=carat)
ggplot(data=diamonds) + geom_histogram(aes(x=carat))
ggplot(data=diamonds) + geom_density(aes(x=carat), fill='grey50')
ggplot(data=diamonds) + geom_point(aes(x=carat, y=price))
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(aes(color=color))
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(aes(color=color)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(aes(color=color)) +
facet_grid(cut~clarity)
+facet_wrap(~color)
ggplot(data=diamonds, ase(x=carat)) +
geom_histogram(color='grey50') +
+facet_wrap(~color)
ggplot(data=diamonds, ase(x=carat)) +
geom_histogram(color='grey50') +
+facet_wrap(~color)
ggplot(data=diamonds, aes(x=carat)) +
geom_histogram(color='grey50') +
+facet_wrap(~color)
ggplot(data=diamonds, aes(x=carat)) +
geom_histogram(color='grey50') +
facet_wrap(~color)
ggplot(data=diamons, aes(x=cut, y=carat)) +
geom_boxplot()
ggplot(data=diamonds, aes(x=cut, y=carat)) +
geom_boxplot()
ggplot(data=diamonds, aes(x=cut, y=carat)) +
geom_violin()
ggplot(economics, aes(x=date, y=pop)) +
geom_line()
ggplot(economics, aes(x=date, y=pop)) +
geom_line() +
labs(title="Population Growth",
x="Month",
y="Population")
library(ggthemes)
cPlot <- ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point(aes(color=color))
cPlot
cPlot +
theme_economist() +
scale_color_economist()
cPlot +
theme_wsj()
x <- 7
y <- 10
x + y
1 + 1 + 10
10 - 5 - 1
3 * 2 * 4
10 / 5
2^4
5 + 6 * 2
(5 + 6) * 2
17%%4
16%%4
x = 2
x
2 = x
2 -> x
x
2 -> x <- 4
x <- 10
x
2 -> x
x
assign('j', 4)
j
a <- b <- 7
print(a, b)
print(a)
print(b)
x <- 2
class(2)
class(x)
x <- 2.5
class(x)
is.numeric(x)
x <- 'two'
is.numeric(x)
w <- 5L
class(w)
is.integer(w)
# string / character
z <- 'data'
class(z)
y <- factor('data')
class(y)
y
nchar(z)
# string / character
z <- 'Hello'
nchar(z)
# string / character
z <- 'Hello 2023'
nchar(z)
nchar(1000000000)
nchar(1000)
# logic ture / false boolean
TRUE * 10
FALSE * 10
k <- TRUE
class(k)
is.logical(k)
# if 2 equals to 3
2 == 3
2 != 3
2 > 3
2 < 3
2 >= 3
2 <= 3
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
x
y <- c('red', 'blue', 'green', 'yellow', 'purple')
y
class(x)
class(y)
x * 3
x - 2
x + 10
sqrt(x)
1:10
s <- c(1:10)
s
s <- c(-10:10)
s
crazy <- c(10:-5)
crazy
length(crazy)
length(s)
x <- 1:10
y <- -5:4
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby",
"Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
length(x)
x
y
x + y
x * 3
x
x + c(1, 2)
# Assign a vector of numeric values to x
x <- c(2, 4, 6, 8, 10)
# Use mean() function to calcuate the average of x
mean(x)
# Create two numeric vectors
x <- c(2, 4, 6, 8, 10)
y <- c(1, 3, 5, 7, 9)
# Use identical() function to check if the two vectors are exactly equal
identical(x,y)
log(2)
log(2, base=10)
log(2, base=5)
?'%%'
?mean
knitr::opts_chunk$set(echo = TRUE)
n1 <- 15
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
# Numeric - Double precision by default
n1 <- 15
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
install.packages("mass")
library(mass)
install.packages("MASS")
library(MASS)
# R install package
install.packages('magrittr')
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
# import the package
library(magrittr)
data(diamonds, package='ggplot2')
force(diamonds)
View(diamonds)
dim(head(diamonds, n=4))
# pip operation
diamonds %>% head(4) %>% dim
# Select some columns from a dataframe
select(diamonds, carat, price)
library(dplyr)
# Select some columns from a dataframe
select(diamonds, carat, price)
# pip operation
diamonds %/% select(carat, price)
# pip operation
diamonds %>% select(carat, price)
# filtering the dataframe
diamonds[diamonds$cut == 'Ideal']
# filtering the dataframe
diamonds[diamonds$cut == 'Ideal',]
# pip operation
diamonds %>% filter(cut %in% c('Ideal', 'Good'))
diamonds %>% filter(cut %in% c('Ideal', 'Good'), price > 10000)
diamonds %>% filter(cut %in% c('Ideal', 'Good') & price > 10000)
# calculate a new variable from two columns
diamonds %>% select(carat, price) %>% mutate(ratio=price/carat)
diamonds %>% select(carat, price) %>% mutate(ratio=price/carat,
double=ratio*2)
summarise(diamonds, mean(price))
summarise(diamonds)
#pip operator
diamonds %>% summarise(mean(price))
diamonds %>%
summarise(
AvgPrice = mean(price),
MedianPrice = median(price),
ObsCount = count(price),
AvgCarat = mean(carat))
diamonds %>%
summarise(
AvgPrice = mean(price),
MedianPrice = median(price),
TotalPrice = sum(price),
AvgCarat = mean(carat))
diamonds %>%
group_by(cut) %>%
summarize(AvgPrice = mean(price),
MedianPrice = median(price))
diamonds %>%
group_by(cut, color) %>%
summarize(AvgPrice = mean(price),
MedianPrice = median(price))
diamonds %>%
group_by(cut, color) %>%
summarize(AvgPrice = mean(price),
MedianPrice = median(price)) %>%
arrange(AvgPrice)
diamonds %>%
group_by(cut, color) %>%
summarize(AvgPrice = mean(price),
MedianPrice = median(price)) %>%
arrange(AvgPrice, MedianPrice)
diamonds %>%
group_by(cut, color) %>%
summarize(AvgPrice = mean(price),
MedianPrice = median(price)) %>%
arrange(desc(AvgPrice))
library(ggplot2)
hist(diamonds$carat, main='Carat Histogram', xlab='Carat')
plot(price ~ carat, data=diamonds, main='Price vs. Carat')
boxplot(diamonds$carat)
## using ggplot2 for the data visualization
ggplot(data=diamons) + geom_histogram(aes(x=carat))
## using ggplot2 for the data visualization
ggplot(data=diamonds) + geom_histogram(aes(x=carat))
## using ggplot2 for the data visualization
ggplot(data=diamonds) + geom_histogram(aes(x=carat), fill='grey50')
ggplot(data=diamonds) + geom_density(aes(x=carat), fill='grey50')
# scatter plot
ggplot(data=diamons, aes(x=carat, y=price)) + geom_point()
# scatter plot
ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point()
# scatter plot
g <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point()
# scatter plot
g <- ggplot(data=diamonds, aes(x=carat, y=price))
g + geom_point(aes(color=color))
g + geom_point(aes(color=color)) + facet_warp(~color)
g + geom_point(aes(color=color)) + facet_wrap(~color)
g + geom_point(aes(color=color)) + facet_wrap(~color)
g + geom_point(aes(color=color)) + facet_wrap(carat~color)
ggplot(diamonds, aes(y=carat, x=cut)) + geom_violin()
source("~/.active-rstudio-document", echo=TRUE)
ggplot(diamonds, aes(y=carat, x=cut)) + geom_boxplot()
ggplot(diamonds, aes(y=price, x=cut)) + geom_boxplot()
ggplot(diamonds, aes(y=price, x=cut)) + geom_violin()
knitr::opts_chunk$set(echo = TRUE)
# Loading the data
data(mtcars)
# Head of the data set
head(mtcars)
x <- 5
y <- 10
z <- 20
print(paste("The average of Mile Per Gallon from this data set is ", x , " with variance ", y , " and standard deviation", z  , "."))
```
x <- 5
y <- 10
z <- 20
print(paste("The average of Mile Per Gallon from this data set is ", x , " with variance ", y , " and standard deviation", z  , "."))
library(RSQLite)
install.package('RSQLite')
install.packages('RSQLite')
library(RSQLite)
filepath <- "data/r.db"
sqlite.driver <- dbDriver("SQLite")
con <- dbConnect(sqlite.driver, dbname=filepath)
getwd()
setwd("C:/Users/Norman/Desktop/Git_Repo/DS311-Technologies-in-Data-Analytic-FA24/Week_06_Import_Data_and_Visualization")
con <- dbConnect(sqlite.driver, dbname=filepath)
dbListTables(con)
family <- dbReadTable(con, 'family')
knitr::opts_chunk$set(echo = TRUE)
getwd()
# Creating a database driver
# makes use you are in the correct working directory, otherwise set it to the correct directory
# setwd("C:/Users/...")
filepath <- "data/r.db"
# Code Block Setting: drv=drv
# Build connection to database
con <- dbConnect(sqlite.driver, dbname=filepath)
# Code Block Setting: drv=drv
# Build connection to database
con <- dbConnect(sqlite.driver, dbname=filepath)
class(con)
# Code Block Setting: con=con
# Extracting table names from the database
dbListTables(con)
# Extracting field (column) names from family table
dbListFields(con, name='family')
# Code Block Setting: con=con
# Use SELECT * to query diamonds table from database
df <- dbGetQuery(con,
"SELECT * FROM family",
stringsAsFactors=FALSE)
head(df)
# Disconnect the connection to database
dbDisconnect(con)
# Disconnect the connection to database
dbDisconnect(con)
drv <- dbDriver("SQLite")
tinytex::reinstall_tinytex(repository = "illinois")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex(repository = "illinois")
update.packages(ask = FALSE, checkBuilt = TRUE)
